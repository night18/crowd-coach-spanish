[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"router.js\":function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// lib/router.js                                                                                            //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nRouter.route(\"/\", {\n  where: \"server\"\n}).post(function () {\n  // console.log(this.request.body); //{ content: 'test1', hitType: 'audio' }\n  let requestBody = this.request.body;\n\n  if (typeof requestBody.method != \"undefined\") {\n    switch (requestBody.method) {\n      case \"provideTip\":\n        Meteor.call(\"provideTip\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(\"success\");\n          }\n        }); //Todo: error controller\n\n        break;\n\n      case \"getTip\":\n        Meteor.call(\"getTip\", requestBody, (err, result) => {\n          this.response.end(result);\n        });\n        break;\n\n      case \"upvoteTip\":\n        Meteor.call(\"upvoteTip\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(result);\n          }\n        });\n        break;\n\n      case \"downvoteTip\":\n        Meteor.call(\"downvoteTip\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(result);\n          }\n        });\n        break;\n\n      case \"getFeedback\":\n        Meteor.call(\"getFeedback\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(result);\n          }\n        });\n        break;\n    }\n  }\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"dataScheme.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// server/dataScheme.js                                                                                     //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nTips = new Mongo.Collection(\"tips\");\nHITType = new Mongo.Collection(\"hit_type\");\nFeedback = new Mongo.Collection(\"feedback\");\nWorker = new Mongo.Collection(\"worker\");\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"main.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// server/main.js                                                                                           //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nlet Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./dataScheme.js\"));\nMeteor.startup(() => {\n  const MAXTOPTIP = 4;\n  const MAXTYPETOPTIP = 3;\n\n  function shuffle(tmparray) {\n    let currentIndex = tmparray.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = tmparray[currentIndex];\n      tmparray[currentIndex] = tmparray[randomIndex];\n      tmparray[randomIndex] = temporaryValue;\n    }\n\n    return tmparray;\n  }\n\n  function guessHITType(id, title, description, requester) {\n    let tipsByID = Tips.find({\n      hit_set_id: id\n    }).fetch();\n    let type = \"\";\n    let typeArray = [];\n\n    if (tipsByID.length > 2) {\n      let maxCount = 0;\n\n      for (let i = 0; i < tipsByID.length; i++) {\n        if (typeof typeArray[tipsByID[i].hit_set_id] == \"undefined\") {\n          typeArray[tipsByID[i].hit_set_id] = 1;\n        } else {\n          typeArray[tipsByID[i].hit_set_id]++;\n        }\n\n        if (typeArray[tipsByID[i].hit_set_id] > maxCount) {\n          type = tipsByID[i].hit_type;\n          maxCount = typeArray[tipsByID[i].hit_set_id];\n        }\n      }\n\n      return type;\n    } else {\n      //Todo: use machine learning\n      if (title.includes(\"media\")) {\n        return \"audio\";\n      } else if (title.includes(\"data\")) {\n        return \"data\";\n      } else if (title.includes(\"website\")) {\n        return \"data\";\n      } else if (title.includes(\"webpage\")) {\n        return \"data\";\n      } else if (title.includes(\"web page\")) {\n        return \"data\";\n      } else if (title.includes(\"receipt\")) {\n        return \"imgtrans\";\n      } else if (title.includes(\"survey\")) {\n        return \"survey\";\n      } else if (title.includes(\"tag\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"categorization\")) {\n        return \"categorize\";\n      } else if (title.includes(\"categorize\")) {\n        return \"categorize\";\n      } else if (title.includes(\"category\")) {\n        return \"categorize\";\n      } else if (title.includes(\"class\")) {\n        return \"categorize\";\n      } else if (title.includes(\"collect\")) {\n        return \"categorize\";\n      } else if (title.includes(\"label\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"article\")) {\n        return \"write\";\n      } else if (title.includes(\"write\")) {\n        return \"write\";\n      } else if (title.includes(\"writing\")) {\n        return \"write\";\n      } else if (title.includes(\"indicate\")) {\n        return \"survey\";\n      } else if (title.includes(\"postcard\")) {\n        return \"imgtrans\";\n      } else if (title.includes(\"contact\")) {\n        return \"data\";\n      } else if (title.includes(\"match\")) {\n        return \"categorize\";\n      } else if (title.includes(\"clean\")) {\n        return \"write\";\n      } else if (title.includes(\"video\")) {\n        return \"audio\";\n      } else if (title.includes(\"audio\")) {\n        return \"audio\";\n      } else if (title.includes(\"coin\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"company\")) {\n        return \"data\";\n      } else if (title.includes(\"predict\")) {\n        return \"survey\";\n      } else if (title.includes(\"study\")) {\n        return \"survey\";\n      } else if (title.includes(\"questionnaire\")) {\n        return \"survey\";\n      } else if (title.includes(\"second\")) {\n        return \"audio\";\n      } else if (title.includes(\"transcribe\")) {\n        return \"imgtrans\";\n      } else if (title.includes(\"speech\")) {\n        return \"audio\";\n      } else if (title.includes(\"draw\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"yourself\")) {\n        return \"survey\";\n      } else if (title.includes(\"official\")) {\n        return \"data\";\n      }\n\n      return \"others\";\n    }\n  }\n\n  function getTopTip(tipArray, getCount) {\n    let returnTips = [];\n\n    if (tipArray.length > 0) {\n      tipArray.sort(function (a, b) {\n        return b.score - a.score;\n      }); // console.log(tipArray);\n\n      let tmpTips = []; //Handle the tips which has the same score \n\n      let prvScore = -3; //The plugin do not display the tips which score is lower than -3\n\n      for (let i = 0; i < tipArray.length; i++) {\n        //Have the same score with previous one\n        if (tipArray[i].score == prvScore) {\n          tmpTips.push(tipArray[i]);\n\n          if (i == tipArray.length - 1) {\n            if (tmpTips.length > 0) {\n              tmpTips = shuffle(tmpTips); //Return tip list has enough space to put all temporary tip list \n\n              if (tmpTips.length <= getCount - returnTips.length) {\n                let tmpLength = tmpTips.length;\n\n                for (let j = 0; j < tmpLength; j++) {\n                  returnTips.push(tmpTips.pop());\n                }\n\n                return returnTips;\n              } else {\n                //Return tip list don't have enough space to put all temporary tip list \n                let tmpLength = getCount - returnTips.length;\n\n                for (let j = 0; j < tmpLength; j++) {\n                  returnTips.push(tmpTips.pop());\n                }\n\n                return returnTips;\n              }\n            }\n          }\n        } else {\n          //The first one or different score\n          if (tmpTips.length > 0) {\n            tmpTips = shuffle(tmpTips); //Return tip list has enough space to put all temporary tip list \n\n            if (tmpTips.length <= getCount - returnTips.length) {\n              let tmpLength = tmpTips.length;\n\n              for (let j = 0; j < tmpLength; j++) {\n                returnTips.push(tmpTips.pop());\n              }\n            } else {\n              //Return tip list don't have enough space to put all temporary tip list \n              let tmpLength = getCount - returnTips.length;\n\n              for (let j = 0; j < tmpLength; j++) {\n                returnTips.push(tmpTips.pop());\n              }\n\n              return returnTips;\n            }\n          }\n\n          prvScore = tipArray[i].score;\n          tmpTips.push(tipArray[i]);\n        }\n\n        if (returnTips.length == getCount) {\n          break;\n        }\n      }\n\n      return returnTips;\n    } else {\n      //Todo: error message\n      console.log(\"There are no tips for the same hit id\");\n      return returnTips;\n    }\n  }\n\n  Meteor.methods({\n    storeTip: function (requestBody) {\n      Tips.insert({\n        provider_id: requestBody.providerID,\n        hit_set_id: requestBody.hitSetID,\n        hit_type: requestBody.hitType,\n        tip: requestBody.content,\n        score: 0\n      }); //console.log(\"Success store raw tips to database\");\n    },\n    storeRawType: function (requestBody) {\n      //Todo: think whether require to store the raw tips info\n      HTType.insert({\n        hit_set_id: requestBody.hitSetID,\n        hit_raw_type: requestBody.hitType,\n        worker_id: requestBody.providerID\n      });\n    },\n    provideTip: function (requestBody) {\n      Tips.insert({\n        provider_id: requestBody.providerID,\n        hit_set_id: requestBody.hitSetID,\n        hit_type: requestBody.hitType,\n        tip: requestBody.content,\n        score: 0,\n        create_timestamp: requestBody.create_timestamp\n      });\n      console.log(\"Success store raw tips to database\");\n    },\n    getTip: function (requestBody) {\n      let topTips = [];\n      console.log(requestBody.hitTitle.toLowerCase()); //Same ID\n\n      let tipsByID = Tips.find({\n        hit_set_id: requestBody.hitSetID\n      }).fetch();\n\n      if (tipsByID.length > 0) {\n        let topTipsByID = getTopTip(tipsByID, MAXTOPTIP);\n        topTips.push.apply(topTips, topTipsByID);\n      } //Same type top\n\n\n      let hitType = guessHITType(requestBody.hitSetID, requestBody.hitTitle.toLowerCase(), requestBody.hitDesc.toLowerCase(), requestBody.requesterID);\n\n      if (hitType != \"others\") {\n        console.log(hitType);\n        let tipsByType = Tips.find({\n          hit_type: hitType,\n          hit_set_id: {\n            $ne: requestBody.hitSetID\n          }\n        }).fetch();\n\n        if (tipsByType.length > 0) {\n          let topTipsByType = getTopTip(tipsByType, MAXTYPETOPTIP);\n          topTips.push.apply(topTips, topTipsByType); // console.log(topTips);\n        }\n      }\n\n      if (hitType != \"others\") {\n        //Same type New, only add one new to the tip list\n        let tipsByTypeID = Tips.find({\n          hit_type: hitType\n        }).fetch();\n        tipsByTypeID = shuffle(tipsByTypeID); //random choose a advice from database\n\n        for (let i = tipsByTypeID.length - 1; i >= 0; i--) {\n          let isAlreadyIn = false;\n\n          if (tipsByTypeID[i].score > -3) {\n            for (let j = 0; j < topTips.length; j++) {\n              if (tipsByTypeID[i]._id == topTips[j]._id) {\n                isAlreadyIn = true;\n                break;\n              }\n            }\n\n            if (!isAlreadyIn) {\n              topTips.push(tipsByTypeID.pop());\n              break;\n            }\n          }\n        }\n      }\n\n      topTips = shuffle(topTips);\n      Worker.insert({\n        hit_title: requestBody.hitTitle,\n        hit_set_id: requestBody.hitSetID,\n        worker_id: requestBody.workerID,\n        requester_id: requestBody.requesterID\n      });\n\n      if (topTips.length > 0) {\n        console.log(topTips);\n        return JSON.stringify(topTips);\n      } else {\n        return \"\";\n      }\n    },\n    \"getFeedback\": function (requestBody) {\n      let feedback = Feedback.find({\n        tip_id: requestBody.tip_id,\n        feedbacker_id: requestBody.feedbacker_id\n      }).fetch();\n\n      if (feedback.length == 0) {\n        return '{\"score\":0}';\n      } else {\n        return '{\"score\":' + feedback[0].score + '}';\n      }\n    },\n    \"upvoteTip\": function (requestBody) {\n      let feedback = Feedback.find({\n        tip_id: requestBody.tip_id,\n        feedbacker_id: requestBody.feedbacker_id\n      }).fetch();\n      let tip = Tips.find({\n        _id: requestBody.tip_id\n      }).fetch()[0];\n\n      if (feedback.length == 0) {\n        //the user hasn't provide feedback to the hit.\n        Feedback.insert({\n          feedbacker_id: requestBody.feedbacker_id,\n          tip_id: requestBody.tip_id,\n          score: 1,\n          create_timestamp: requestBody.create_timestamp\n        });\n        let tipScore = tip.score + 1;\n        Tips.update({\n          _id: requestBody.tip_id\n        }, {\n          $set: {\n            score: tipScore\n          }\n        });\n        return '{\"score\":1}';\n      } else {\n        if (feedback[0].score == 1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 0\n            }\n          });\n          let tipScore = tip.score - 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":0}';\n        } else if (feedback[0].score == 0) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 1\n            }\n          });\n          let tipScore = tip.score + 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":1}';\n        } else if (feedback[0].score == -1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 1\n            }\n          });\n          let tipScore = tip.score + 2;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":1}';\n        }\n      }\n    },\n    \"downvoteTip\": function (requestBody) {\n      let feedback = Feedback.find({\n        tip_id: requestBody.tip_id,\n        feedbacker_id: requestBody.feedbacker_id\n      }).fetch();\n      let tip = Tips.find({\n        _id: requestBody.tip_id\n      }).fetch()[0];\n\n      if (feedback.length == 0) {\n        //the user hasn't provide feedback to the hit.\n        Feedback.insert({\n          feedbacker_id: requestBody.feedbacker_id,\n          tip_id: requestBody.tip_id,\n          score: -1,\n          create_timestamp: requestBody.create_timestamp\n        });\n        let tipScore = tip.score - 1;\n        Tips.update({\n          _id: requestBody.tip_id\n        }, {\n          $set: {\n            score: tipScore\n          }\n        });\n        return '{\"score\":-1}';\n      } else {\n        if (feedback[0].score == 1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: -1\n            }\n          });\n          let tipScore = tip.score - 2;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":-1}';\n        } else if (feedback[0].score == 0) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: -1\n            }\n          });\n          let tipScore = tip.score - 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":-1}';\n        } else if (feedback[0].score == -1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 0\n            }\n          });\n          let tipScore = tip.score + 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":0}';\n        }\n      }\n    }\n  });\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/lib/router.js\");\nrequire(\"/server/dataScheme.js\");\nrequire(\"/server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["lib/router.js","server/dataScheme.js","server/main.js"],"names":["Router","route","where","post","requestBody","request","body","method","Meteor","call","err","result","response","end","Mongo","module","watch","require","v","Tips","Collection","HITType","Feedback","Worker","startup","MAXTOPTIP","MAXTYPETOPTIP","shuffle","tmparray","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","guessHITType","id","title","description","requester","tipsByID","find","hit_set_id","fetch","type","typeArray","maxCount","i","hit_type","includes","getTopTip","tipArray","getCount","returnTips","sort","a","b","score","tmpTips","prvScore","push","tmpLength","j","pop","console","log","methods","storeTip","insert","provider_id","providerID","hitSetID","hitType","tip","content","storeRawType","HTType","hit_raw_type","worker_id","provideTip","create_timestamp","getTip","topTips","hitTitle","toLowerCase","topTipsByID","apply","hitDesc","requesterID","tipsByType","$ne","topTipsByType","tipsByTypeID","isAlreadyIn","_id","hit_title","workerID","requester_id","JSON","stringify","feedback","tip_id","feedbacker_id","tipScore","update","$set"],"mappings":"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","file":"/app.js","sourcesContent":["Router.route(\"/\", {where: \"server\"})\n\t.post(function() {\n\t\t// console.log(this.request.body); //{ content: 'test1', hitType: 'audio' }\n\t\t\n\t\tlet requestBody = this.request.body;\n\t\tif(typeof requestBody.method != \"undefined\"){\n\t\t\tswitch(requestBody.method){\n\t\t\t\tcase \"provideTip\":\n\t\t\t\t\tMeteor.call(\"provideTip\", requestBody, (err,result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(\"success\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\t//Todo: error controller\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"getTip\":\n\t\t\t\t\tMeteor.call(\"getTip\", requestBody, (err, result) => {\n\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t});\n\t\t\t\t\tbreak; \n\t\t\t\tcase \"upvoteTip\":\n\t\t\t\t\tMeteor.call(\"upvoteTip\", requestBody, (err,result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"downvoteTip\":\n\t\t\t\t\tMeteor.call(\"downvoteTip\", requestBody, (err,result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"getFeedback\":\n\t\t\t\t\tMeteor.call(\"getFeedback\", requestBody, (err, result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t});","import { Mongo } from \"meteor/mongo\";\n\nTips = new Mongo.Collection(\"tips\");\nHITType = new Mongo.Collection(\"hit_type\");\nFeedback = new Mongo.Collection(\"feedback\");\nWorker = new Mongo.Collection(\"worker\");","import { Meteor } from 'meteor/meteor';\nimport \"./dataScheme.js\";\n\nMeteor.startup(() => {\n\tconst MAXTOPTIP = 4;\n\tconst MAXTYPETOPTIP = 3;\n\n\n\tfunction shuffle(tmparray) {\n\t\tlet currentIndex = tmparray.length, temporaryValue, randomIndex;\n\n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = tmparray[currentIndex];\n\t\ttmparray[currentIndex] = tmparray[randomIndex];\n\t\ttmparray[randomIndex] = temporaryValue;\n\t\t}\n\treturn tmparray;\n\t}\n\n\tfunction guessHITType(id ,title, description, requester){\n\n\t\tlet tipsByID = Tips.find({hit_set_id: id}).fetch();\n\t\tlet type = \"\";\n\t\tlet typeArray = [];\n\t\tif(tipsByID.length > 2){\n\t\t\tlet maxCount = 0;\n\t\t\tfor(let i = 0; i < tipsByID.length; i++){\n\t\t\t\tif (typeof typeArray[tipsByID[i].hit_set_id] == \"undefined\"){\n\t\t\t\t\ttypeArray[tipsByID[i].hit_set_id] = 1;\n\t\t\t\t}else{\n\t\t\t\t\ttypeArray[tipsByID[i].hit_set_id]++;\n\t\t\t\t}\n\t\t\t\tif(typeArray[tipsByID[i].hit_set_id] > maxCount){\n\t\t\t\t\ttype = tipsByID[i].hit_type;\n\t\t\t\t\tmaxCount = typeArray[tipsByID[i].hit_set_id];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn type;\n\t\t}else{\n\t\t\t//Todo: use machine learning\n\t\t\tif(title.includes(\"media\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"data\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"website\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"webpage\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"web page\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"receipt\")){\n\t\t\t\treturn \"imgtrans\";\n\t\t\t}else if(title.includes(\"survey\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"tag\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"categorization\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"categorize\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"category\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"class\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"collect\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"label\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"article\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"write\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"writing\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"indicate\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"postcard\")){\n\t\t\t\treturn \"imgtrans\";\n\t\t\t}else if(title.includes(\"contact\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"match\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"clean\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"video\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"audio\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"coin\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"company\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"predict\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"study\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"questionnaire\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"second\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"transcribe\")){\n\t\t\t\treturn \"imgtrans\";\n\t\t\t}else if(title.includes(\"speech\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"draw\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"yourself\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"official\")){\n\t\t\t\treturn \"data\";\n\t\t\t}\n\t\t\treturn \"others\";\n\t\t}\n\t}\n\t\t\n\tfunction getTopTip(tipArray, getCount){\n\t\tlet returnTips = [];\n\t\tif(tipArray.length > 0){\n\t\t\t\ttipArray.sort(function(a,b){return b.score - a.score});\n\t\t\t\t// console.log(tipArray);\n\t\t\t\tlet tmpTips = []; //Handle the tips which has the same score \n\t\t\t\tlet prvScore = -3; //The plugin do not display the tips which score is lower than -3\n\t\t\t\tfor(let i = 0 ; i < tipArray.length; i++){\n\t\t\t\t\t//Have the same score with previous one\n\t\t\t\t\tif(tipArray[i].score == prvScore){\n\t\t\t\t\t\ttmpTips.push(tipArray[i]);\n\t\t\t\t\t\tif( i == tipArray.length -1){\n\t\t\t\t\t\t\tif(tmpTips.length > 0){\n\t\t\t\t\t\t\t\ttmpTips = shuffle(tmpTips);\n\t\t\t\t\t\t\t\t//Return tip list has enough space to put all temporary tip list \n\t\t\t\t\t\t\t\tif(tmpTips.length <= getCount - returnTips.length ){\n\t\t\t\t\t\t\t\t\tlet tmpLength = tmpTips.length;\n\t\t\t\t\t\t\t\t\tfor(let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn returnTips;\n\n\t\t\t\t\t\t\t\t}else{ //Return tip list don't have enough space to put all temporary tip list \n\t\t\t\t\t\t\t\t\tlet tmpLength = getCount - returnTips.length\n\t\t\t\t\t\t\t\t\tfor (let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn returnTips;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{ //The first one or different score\n\t\t\t\t\t\tif(tmpTips.length > 0){\n\t\t\t\t\t\t\ttmpTips = shuffle(tmpTips);\n\t\t\t\t\t\t\t//Return tip list has enough space to put all temporary tip list \n\t\t\t\t\t\t\tif(tmpTips.length <= getCount - returnTips.length ){\n\t\t\t\t\t\t\t\tlet tmpLength = tmpTips.length;\n\t\t\t\t\t\t\t\tfor(let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{ //Return tip list don't have enough space to put all temporary tip list \n\t\t\t\t\t\t\t\tlet tmpLength = getCount - returnTips.length\n\t\t\t\t\t\t\t\tfor (let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn returnTips;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprvScore = tipArray[i].score;\n\t\t\t\t\t\ttmpTips.push(tipArray[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(returnTips.length == getCount){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn returnTips;\n\t\t\t}else{\n\t\t\t\t//Todo: error message\n\t\t\t\tconsole.log(\"There are no tips for the same hit id\");\n\t\t\t\treturn returnTips;\n\t\t\t}\n\n\t}\n\n\n\tMeteor.methods({\n\t\tstoreTip: function(requestBody){\n\t\t\tTips.insert({\n\t\t\t\tprovider_id: requestBody.providerID,\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\thit_type : requestBody.hitType,\n\t\t\t\ttip: requestBody.content,\n\t\t\t\tscore: 0\n\t\t\t});\n\t\t\t//console.log(\"Success store raw tips to database\");\n\t\t},\n\t\tstoreRawType: function(requestBody){\n\t\t\t//Todo: think whether require to store the raw tips info\n\t\t\tHTType.insert({\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\thit_raw_type: requestBody.hitType,\n\t\t\t\tworker_id: requestBody.providerID\n\t\t\t});\n\t\t},\n\t\tprovideTip: function(requestBody){\n\t\t\tTips.insert({\n\t\t\t\tprovider_id: requestBody.providerID,\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\thit_type : requestBody.hitType,\n\t\t\t\ttip: requestBody.content,\n\t\t\t\tscore: 0,\n\t\t\t\tcreate_timestamp: requestBody.create_timestamp\n\t\t\t});\n\t\t\tconsole.log(\"Success store raw tips to database\");\n\t\t\t\n\t\t},\n\t\tgetTip: function(requestBody){\n\t\t\tlet topTips = [];\n\t\t\tconsole.log(requestBody.hitTitle.toLowerCase());\n\t\t\t//Same ID\n\t\t\tlet tipsByID = Tips.find({hit_set_id: requestBody.hitSetID}).fetch();\n\t\t\tif(tipsByID.length > 0){\n\t\t\t\tlet topTipsByID = getTopTip(tipsByID, MAXTOPTIP);\n\t\t\t\ttopTips.push.apply(topTips, topTipsByID);\n\t\t\t}\n\t\t\t\n\t\t\t//Same type top\n\t\t\tlet hitType = guessHITType(requestBody.hitSetID, requestBody.hitTitle.toLowerCase(), requestBody.hitDesc.toLowerCase(), requestBody.requesterID);\n\t\t\tif(hitType != \"others\"){\n\t\t\t\tconsole.log(hitType);\n\t\t\t\tlet tipsByType = Tips.find({hit_type: hitType, hit_set_id: {$ne: requestBody.hitSetID}}).fetch();\n\t\t\t\tif(tipsByType.length > 0){\n\t\t\t\t\tlet topTipsByType = getTopTip(tipsByType, MAXTYPETOPTIP);\n\t\t\t\t\ttopTips.push.apply(topTips, topTipsByType);\n\t\t\t\t\t// console.log(topTips);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(hitType != \"others\"){\n\t\t\t\t//Same type New, only add one new to the tip list\n\t\t\t\tlet tipsByTypeID = Tips.find({hit_type: hitType}).fetch();\n\t\t\t\ttipsByTypeID = shuffle(tipsByTypeID); //random choose a advice from database\n\t\t\t\tfor(let i = tipsByTypeID.length-1; i >= 0 ; i--){\n\t\t\t\t\tlet isAlreadyIn = false;\n\t\t\t\t\tif(tipsByTypeID[i].score > -3 ){\n\t\t\t\t\t\tfor(let j = 0 ; j < topTips.length; j++){\n\t\t\t\t\t\t\tif(tipsByTypeID[i]._id == topTips[j]._id){\n\t\t\t\t\t\t\t\tisAlreadyIn = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isAlreadyIn){\n\t\t\t\t\t\t\ttopTips.push(tipsByTypeID.pop());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttopTips = shuffle(topTips);\n\n\t\t\tWorker.insert({\n\t\t\t\thit_title: requestBody.hitTitle,\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\tworker_id : requestBody.workerID,\n\t\t\t\trequester_id: requestBody.requesterID\n\t\t\t});\n\n\t\t\tif(topTips.length > 0){\n\t\t\t\tconsole.log(topTips);\n\t\t\t\treturn JSON.stringify(topTips);\n\t\t\t}else{\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\t\n\t\t},\n\t\t\"getFeedback\": function(requestBody){\n\t\t\tlet feedback = Feedback.find({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}).fetch();\n\t\t\tif(feedback.length == 0){\n\t\t\t\treturn '{\"score\":0}';\n\t\t\t} else {\n\t\t\t\treturn '{\"score\":'+feedback[0].score+'}';\n\t\t\t}\n\t\t},\n\t\t\"upvoteTip\": function(requestBody){\n\t\t\tlet feedback = Feedback.find({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}).fetch();\n\t\t\tlet tip = Tips.find({_id: requestBody.tip_id}).fetch()[0];\n\t\t\tif(feedback.length == 0){ //the user hasn't provide feedback to the hit.\n\t\t\t\tFeedback.insert({\n\t\t\t\t\tfeedbacker_id: requestBody.feedbacker_id,\n\t\t\t\t\ttip_id: requestBody.tip_id,\n\t\t\t\t\tscore: 1,\n\t\t\t\t\tcreate_timestamp: requestBody.create_timestamp\n\t\t\t\t});\n\t\t\t\tlet tipScore = tip.score + 1;\n\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\treturn '{\"score\":1}';\n\t\t\t}else{\n\t\t\t\tif(feedback[0].score == 1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 0}});\n\t\t\t\t\tlet tipScore = tip.score - 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":0}';\n\t\t\t\t}else if(feedback[0].score == 0){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 1}});\n\t\t\t\t\tlet tipScore = tip.score + 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":1}';\n\t\t\t\t}else if(feedback[0].score == -1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 1}});\n\t\t\t\t\tlet tipScore = tip.score + 2;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":1}';\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\t\"downvoteTip\": function(requestBody){\n\t\t\tlet feedback = Feedback.find({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}).fetch();\n\t\t\tlet tip = Tips.find({_id: requestBody.tip_id}).fetch()[0];\n\t\t\tif(feedback.length == 0){ //the user hasn't provide feedback to the hit.\n\t\t\t\tFeedback.insert({\n\t\t\t\t\tfeedbacker_id: requestBody.feedbacker_id,\n\t\t\t\t\ttip_id: requestBody.tip_id,\n\t\t\t\t\tscore: -1,\n\t\t\t\t\tcreate_timestamp: requestBody.create_timestamp\n\t\t\t\t});\n\t\t\t\tlet tipScore = tip.score - 1;\n\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\treturn '{\"score\":-1}';\n\t\t\t}else{\n\t\t\t\tif(feedback[0].score == 1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: -1}});\n\t\t\t\t\tlet tipScore = tip.score - 2;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":-1}';\n\t\t\t\t}else if(feedback[0].score == 0){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: -1}});\n\t\t\t\t\tlet tipScore = tip.score - 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":-1}';\n\t\t\t\t}else if(feedback[0].score == -1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 0}});\n\t\t\t\t\tlet tipScore = tip.score + 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":0}';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n});\n"]}}]