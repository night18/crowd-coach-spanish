{"metadata":{},"options":{"plugins":[{"key":"base$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"base$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$2","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$4","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"base$0$9","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$10","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}}],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/chunwei/Documents/Lab/CrowdLearning/crowd_server/server/main.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","jsx",["flow",{}],["flow",{}],"objectRestSpread","objectRestSpread","dynamicImport","asyncGenerators","classProperties","classPrivateProperties"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"server/main.js","filename":"/home/chunwei/Documents/Lab/CrowdLearning/crowd_server/server/main.js","passPerPreset":false,"envName":"development","cwd":"/home/chunwei/Documents/Lab/CrowdLearning/crowd_server","root":"/home/chunwei/Documents/Lab/CrowdLearning/crowd_server","presets":[],"generatorOpts":{"filename":"/home/chunwei/Documents/Lab/CrowdLearning/crowd_server/server/main.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"server/main.js"}},"code":"let Meteor;\nmodule.watch(require(\"meteor/meteor\"), {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nmodule.watch(require(\"./dataScheme.js\"));\nMeteor.startup(() => {\n  const MAXTOPTIP = 3;\n  const MAXTYPETOPTIP = 5;\n\n  function shuffle(tmparray) {\n    let currentIndex = tmparray.length,\n        temporaryValue,\n        randomIndex; // While there remain elements to shuffle...\n\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // And swap it with the current element.\n\n      temporaryValue = tmparray[currentIndex];\n      tmparray[currentIndex] = tmparray[randomIndex];\n      tmparray[randomIndex] = temporaryValue;\n    }\n\n    return tmparray;\n  }\n\n  function guessHITType(id, title, description, requester) {\n    let tipsByID = Tips.find({\n      hit_set_id: id\n    }).fetch();\n    let type = \"\";\n    let typeArray = [];\n\n    if (tipsByID.length > 2) {\n      let maxCount = 0;\n\n      for (let i = 0; i < tipsByID.length; i++) {\n        if (typeof typeArray[tipsByID[i].hit_set_id] == \"undefined\") {\n          typeArray[tipsByID[i].hit_set_id] = 1;\n        } else {\n          typeArray[tipsByID[i].hit_set_id]++;\n        }\n\n        if (typeArray[tipsByID[i].hit_set_id] > maxCount) {\n          type = tipsByID[i].hit_type;\n          maxCount = typeArray[tipsByID[i].hit_set_id];\n        }\n      }\n\n      return type;\n    } else {\n      //Todo: use machine learning\n      if (title.includes(\"media\")) {\n        return \"audio\";\n      } else if (title.includes(\"data\")) {\n        return \"data\";\n      } else if (title.includes(\"website\")) {\n        return \"data\";\n      } else if (title.includes(\"webpage\")) {\n        return \"data\";\n      } else if (title.includes(\"receipt\")) {\n        return \"imgtrans\";\n      } else if (title.includes(\"survey\")) {\n        return \"survey\";\n      } else if (title.includes(\"tag\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"Categorization\")) {\n        return \"categorize\";\n      } else if (title.includes(\"categorize\")) {\n        return \"categorize\";\n      } else if (title.includes(\"category\")) {\n        return \"categorize\";\n      } else if (title.includes(\"class\")) {\n        return \"categorize\";\n      } else if (title.includes(\"collect\")) {\n        return \"categorize\";\n      } else if (title.includes(\"label\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"article\")) {\n        return \"write\";\n      } else if (title.includes(\"write\")) {\n        return \"write\";\n      } else if (title.includes(\"writing\")) {\n        return \"write\";\n      } else if (title.includes(\"indicate\")) {\n        return \"survey\";\n      } else if (title.includes(\"postcard\")) {\n        return \"imgtrans\";\n      } else if (title.includes(\"contact\")) {\n        return \"data\";\n      } else if (title.includes(\"match\")) {\n        return \"categorize\";\n      } else if (title.includes(\"clean\")) {\n        return \"write\";\n      } else if (title.includes(\"video\")) {\n        return \"audio\";\n      } else if (title.includes(\"audio\")) {\n        return \"audio\";\n      } else if (title.includes(\"coin\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"company\")) {\n        return \"data\";\n      } else if (title.includes(\"predict\")) {\n        return \"survey\";\n      } else if (title.includes(\"study\")) {\n        return \"survey\";\n      } else if (title.includes(\"questionnaire\")) {\n        return \"survey\";\n      } else if (title.includes(\"second\")) {\n        return \"audio\";\n      } else if (title.includes(\"transcribe\")) {\n        return \"imgtrans\";\n      } else if (title.includes(\"speech\")) {\n        return \"audio\";\n      } else if (title.includes(\"draw\")) {\n        return \"imgtag\";\n      } else if (title.includes(\"yourself\")) {\n        return \"survey\";\n      } else if (title.includes(\"official\")) {\n        return \"data\";\n      }\n\n      return \"others\";\n    }\n  }\n\n  function getTopTip(tipArray, getCount) {\n    let returnTips = [];\n\n    if (tipArray.length > 0) {\n      tipArray.sort(function (a, b) {\n        return b.score - a.score;\n      }); // console.log(tipArray);\n\n      let tmpTips = []; //Handle the tips which has the same score \n\n      let prvScore = -3; //The plugin do not display the tips which score is lower than -3\n\n      for (let i = 0; i < tipArray.length; i++) {\n        //Have the same score with previous one\n        if (tipArray[i].score == prvScore) {\n          tmpTips.push(tipArray[i]);\n\n          if (i == tipArray.length - 1) {\n            if (tmpTips.length > 0) {\n              tmpTips = shuffle(tmpTips); //Return tip list has enough space to put all temporary tip list \n\n              if (tmpTips.length <= getCount - returnTips.length) {\n                let tmpLength = tmpTips.length;\n\n                for (let j = 0; j < tmpLength; j++) {\n                  returnTips.push(tmpTips.pop());\n                }\n\n                return returnTips;\n              } else {\n                //Return tip list don't have enough space to put all temporary tip list \n                let tmpLength = getCount - returnTips.length;\n\n                for (let j = 0; j < tmpLength; j++) {\n                  returnTips.push(tmpTips.pop());\n                }\n\n                return returnTips;\n              }\n            }\n          }\n        } else {\n          //The first one or different score\n          if (tmpTips.length > 0) {\n            tmpTips = shuffle(tmpTips); //Return tip list has enough space to put all temporary tip list \n\n            if (tmpTips.length <= getCount - returnTips.length) {\n              let tmpLength = tmpTips.length;\n\n              for (let j = 0; j < tmpLength; j++) {\n                returnTips.push(tmpTips.pop());\n              }\n            } else {\n              //Return tip list don't have enough space to put all temporary tip list \n              let tmpLength = getCount - returnTips.length;\n\n              for (let j = 0; j < tmpLength; j++) {\n                returnTips.push(tmpTips.pop());\n              }\n\n              return returnTips;\n            }\n          }\n\n          prvScore = tipArray[i].score;\n          tmpTips.push(tipArray[i]);\n        }\n\n        if (returnTips.length == getCount) {\n          break;\n        }\n      }\n\n      return returnTips;\n    } else {\n      //Todo: error message\n      console.log(\"There are no tips for the same hit id\");\n      return returnTips;\n    }\n  }\n\n  Meteor.methods({\n    storeTip: function (requestBody) {\n      Tips.insert({\n        provider_id: requestBody.providerID,\n        hit_set_id: requestBody.hitSetID,\n        hit_type: requestBody.hitType,\n        tip: requestBody.content,\n        score: 0\n      }); //console.log(\"Success store raw tips to database\");\n    },\n    storeRawType: function (requestBody) {\n      //Todo: think whether require to store the raw tips info\n      HTType.insert({\n        hit_set_id: requestBody.hitSetID,\n        hit_raw_type: requestBody.hitType,\n        worker_id: requestBody.providerID\n      });\n    },\n    provideTip: function (requestBody) {\n      Tips.insert({\n        provider_id: requestBody.providerID,\n        hit_set_id: requestBody.hitSetID,\n        hit_type: requestBody.hitType,\n        tip: requestBody.content,\n        score: 0,\n        create_timestamp: requestBody.create_timestamp\n      });\n      console.log(\"Success store raw tips to database\");\n    },\n    getTip: function (requestBody) {\n      let topTips = [];\n      console.log(requestBody.hitTitle.toLowerCase()); //Same ID\n\n      let tipsByID = Tips.find({\n        hit_set_id: requestBody.hitSetID\n      }).fetch();\n\n      if (tipsByID.length > 0) {\n        console.log(\"Same ID\");\n        let topTipsByID = getTopTip(tipsByID, MAXTOPTIP);\n        topTips.push.apply(topTips, topTipsByID);\n      } //Same type top\n\n\n      let hitType = guessHITType(requestBody.hitSetID, requestBody.hitTitle.toLowerCase(), requestBody.hitDesc.toLowerCase(), requestBody.requesterID);\n\n      if (hitType != \"others\") {\n        console.log(hitType);\n        let tipsByType = Tips.find({\n          hit_type: hitType,\n          hit_set_id: {\n            $ne: requestBody.hitSetID\n          }\n        }).fetch();\n\n        if (tipsByType.length > 0) {\n          console.log(MAXTYPETOPTIP - topTips.length);\n          let topTipsByType = getTopTip(tipsByType, MAXTYPETOPTIP - topTips.length);\n          topTips.push.apply(topTips, topTipsByType); // console.log(topTips);\n        }\n      }\n\n      if (hitType != \"others\") {\n        //Same type New, only add one new to the tip list\n        console.log(\"Random Tasks\");\n        let tipsByTypeID = Tips.find({\n          hit_type: hitType\n        }).fetch();\n        tipsByTypeID = shuffle(tipsByTypeID); //random choose a advice from database\n\n        for (let i = tipsByTypeID.length - 1; i >= 0; i--) {\n          let isAlreadyIn = false;\n\n          if (tipsByTypeID[i].score > -3) {\n            for (let j = 0; j < topTips.length; j++) {\n              if (tipsByTypeID[i]._id == topTips[j]._id) {\n                isAlreadyIn = true;\n                break;\n              }\n            }\n\n            if (!isAlreadyIn) {\n              topTips.push(tipsByTypeID.pop());\n              break;\n            }\n          }\n        }\n      }\n\n      console.log(topTips);\n      Worker.insert({\n        hit_title: requestBody.hitTitle,\n        hit_set_id: requestBody.hitSetID,\n        worker_id: requestBody.workerID,\n        requester_id: requestBody.requesterID\n      });\n\n      if (topTips.length > 0) {\n        return JSON.stringify(topTips);\n      } else {\n        return \"\";\n      }\n    },\n    \"getFeedback\": function (requestBody) {\n      let feedback = Feedback.find({\n        tip_id: requestBody.tip_id,\n        feedbacker_id: requestBody.feedbacker_id\n      }).fetch();\n\n      if (feedback.length == 0) {\n        return '{\"score\":0}';\n      } else {\n        return '{\"score\":' + feedback[0].score + '}';\n      }\n    },\n    \"upvoteTip\": function (requestBody) {\n      let feedback = Feedback.find({\n        tip_id: requestBody.tip_id,\n        feedbacker_id: requestBody.feedbacker_id\n      }).fetch();\n      let tip = Tips.find({\n        _id: requestBody.tip_id\n      }).fetch()[0];\n\n      if (feedback.length == 0) {\n        //the user hasn't provide feedback to the hit.\n        Feedback.insert({\n          feedbacker_id: requestBody.feedbacker_id,\n          tip_id: requestBody.tip_id,\n          score: 1,\n          create_timestamp: requestBody.create_timestamp\n        });\n        let tipScore = tip.score + 1;\n        Tips.update({\n          _id: requestBody.tip_id\n        }, {\n          $set: {\n            score: tipScore\n          }\n        });\n        return '{\"score\":1}';\n      } else {\n        if (feedback[0].score == 1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 0\n            }\n          });\n          let tipScore = tip.score - 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":0}';\n        } else if (feedback[0].score == 0) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 1\n            }\n          });\n          let tipScore = tip.score + 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":1}';\n        } else if (feedback[0].score == -1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 1\n            }\n          });\n          let tipScore = tip.score + 2;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":1}';\n        }\n      }\n    },\n    \"downvoteTip\": function (requestBody) {\n      let feedback = Feedback.find({\n        tip_id: requestBody.tip_id,\n        feedbacker_id: requestBody.feedbacker_id\n      }).fetch();\n      let tip = Tips.find({\n        _id: requestBody.tip_id\n      }).fetch()[0];\n\n      if (feedback.length == 0) {\n        //the user hasn't provide feedback to the hit.\n        Feedback.insert({\n          feedbacker_id: requestBody.feedbacker_id,\n          tip_id: requestBody.tip_id,\n          score: -1,\n          create_timestamp: requestBody.create_timestamp\n        });\n        let tipScore = tip.score - 1;\n        Tips.update({\n          _id: requestBody.tip_id\n        }, {\n          $set: {\n            score: tipScore\n          }\n        });\n        return '{\"score\":-1}';\n      } else {\n        if (feedback[0].score == 1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: -1\n            }\n          });\n          let tipScore = tip.score - 2;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":-1}';\n        } else if (feedback[0].score == 0) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: -1\n            }\n          });\n          let tipScore = tip.score - 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":-1}';\n        } else if (feedback[0].score == -1) {\n          Feedback.update({\n            tip_id: requestBody.tip_id,\n            feedbacker_id: requestBody.feedbacker_id\n          }, {\n            $set: {\n              score: 0\n            }\n          });\n          let tipScore = tip.score + 1;\n          Tips.update({\n            _id: requestBody.tip_id\n          }, {\n            $set: {\n              score: tipScore\n            }\n          });\n          return '{\"score\":0}';\n        }\n      }\n    }\n  });\n});","map":{"version":3,"sources":["server/main.js"],"names":["Meteor","module","watch","require","v","startup","MAXTOPTIP","MAXTYPETOPTIP","shuffle","tmparray","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","guessHITType","id","title","description","requester","tipsByID","Tips","find","hit_set_id","fetch","type","typeArray","maxCount","i","hit_type","includes","getTopTip","tipArray","getCount","returnTips","sort","a","b","score","tmpTips","prvScore","push","tmpLength","j","pop","console","log","methods","storeTip","requestBody","insert","provider_id","providerID","hitSetID","hitType","tip","content","storeRawType","HTType","hit_raw_type","worker_id","provideTip","create_timestamp","getTip","topTips","hitTitle","toLowerCase","topTipsByID","apply","hitDesc","requesterID","tipsByType","$ne","topTipsByType","tipsByTypeID","isAlreadyIn","_id","Worker","hit_title","workerID","requester_id","JSON","stringify","feedback","Feedback","tip_id","feedbacker_id","tipScore","update","$set"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport \"./dataScheme.js\";\n\nMeteor.startup(() => {\n\tconst MAXTOPTIP = 3;\n\tconst MAXTYPETOPTIP = 5;\n\n\n\tfunction shuffle(tmparray) {\n\t\tlet currentIndex = tmparray.length, temporaryValue, randomIndex;\n\n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\n\t\t// Pick a remaining element...\n\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\tcurrentIndex -= 1;\n\n\t\t// And swap it with the current element.\n\t\ttemporaryValue = tmparray[currentIndex];\n\t\ttmparray[currentIndex] = tmparray[randomIndex];\n\t\ttmparray[randomIndex] = temporaryValue;\n\t\t}\n\treturn tmparray;\n\t}\n\n\tfunction guessHITType(id ,title, description, requester){\n\n\t\tlet tipsByID = Tips.find({hit_set_id: id}).fetch();\n\t\tlet type = \"\";\n\t\tlet typeArray = [];\n\t\tif(tipsByID.length > 2){\n\t\t\tlet maxCount = 0;\n\t\t\tfor(let i = 0; i < tipsByID.length; i++){\n\t\t\t\tif (typeof typeArray[tipsByID[i].hit_set_id] == \"undefined\"){\n\t\t\t\t\ttypeArray[tipsByID[i].hit_set_id] = 1;\n\t\t\t\t}else{\n\t\t\t\t\ttypeArray[tipsByID[i].hit_set_id]++;\n\t\t\t\t}\n\t\t\t\tif(typeArray[tipsByID[i].hit_set_id] > maxCount){\n\t\t\t\t\ttype = tipsByID[i].hit_type;\n\t\t\t\t\tmaxCount = typeArray[tipsByID[i].hit_set_id];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn type;\n\t\t}else{\n\t\t\t//Todo: use machine learning\n\t\t\tif(title.includes(\"media\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"data\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"website\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"webpage\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"receipt\")){\n\t\t\t\treturn \"imgtrans\";\n\t\t\t}else if(title.includes(\"survey\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"tag\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"Categorization\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"categorize\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"category\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"class\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"collect\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"label\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"article\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"write\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"writing\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"indicate\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"postcard\")){\n\t\t\t\treturn \"imgtrans\";\n\t\t\t}else if(title.includes(\"contact\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"match\")){\n\t\t\t\treturn \"categorize\";\n\t\t\t}else if(title.includes(\"clean\")){\n\t\t\t\treturn \"write\";\n\t\t\t}else if(title.includes(\"video\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"audio\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"coin\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"company\")){\n\t\t\t\treturn \"data\";\n\t\t\t}else if(title.includes(\"predict\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"study\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"questionnaire\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"second\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"transcribe\")){\n\t\t\t\treturn \"imgtrans\";\n\t\t\t}else if(title.includes(\"speech\")){\n\t\t\t\treturn \"audio\";\n\t\t\t}else if(title.includes(\"draw\")){\n\t\t\t\treturn \"imgtag\";\n\t\t\t}else if(title.includes(\"yourself\")){\n\t\t\t\treturn \"survey\";\n\t\t\t}else if(title.includes(\"official\")){\n\t\t\t\treturn \"data\";\n\t\t\t}\n\t\t\treturn \"others\";\n\t\t}\n\t}\n\t\t\n\tfunction getTopTip(tipArray, getCount){\n\t\tlet returnTips = [];\n\t\tif(tipArray.length > 0){\n\t\t\t\ttipArray.sort(function(a,b){return b.score - a.score});\n\t\t\t\t// console.log(tipArray);\n\t\t\t\tlet tmpTips = []; //Handle the tips which has the same score \n\t\t\t\tlet prvScore = -3; //The plugin do not display the tips which score is lower than -3\n\t\t\t\tfor(let i = 0 ; i < tipArray.length; i++){\n\t\t\t\t\t//Have the same score with previous one\n\t\t\t\t\tif(tipArray[i].score == prvScore){\n\t\t\t\t\t\ttmpTips.push(tipArray[i]);\n\t\t\t\t\t\tif( i == tipArray.length -1){\n\t\t\t\t\t\t\tif(tmpTips.length > 0){\n\t\t\t\t\t\t\t\ttmpTips = shuffle(tmpTips);\n\t\t\t\t\t\t\t\t//Return tip list has enough space to put all temporary tip list \n\t\t\t\t\t\t\t\tif(tmpTips.length <= getCount - returnTips.length ){\n\t\t\t\t\t\t\t\t\tlet tmpLength = tmpTips.length;\n\t\t\t\t\t\t\t\t\tfor(let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn returnTips;\n\n\t\t\t\t\t\t\t\t}else{ //Return tip list don't have enough space to put all temporary tip list \n\t\t\t\t\t\t\t\t\tlet tmpLength = getCount - returnTips.length\n\t\t\t\t\t\t\t\t\tfor (let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn returnTips;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{ //The first one or different score\n\t\t\t\t\t\tif(tmpTips.length > 0){\n\t\t\t\t\t\t\ttmpTips = shuffle(tmpTips);\n\t\t\t\t\t\t\t//Return tip list has enough space to put all temporary tip list \n\t\t\t\t\t\t\tif(tmpTips.length <= getCount - returnTips.length ){\n\t\t\t\t\t\t\t\tlet tmpLength = tmpTips.length;\n\t\t\t\t\t\t\t\tfor(let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{ //Return tip list don't have enough space to put all temporary tip list \n\t\t\t\t\t\t\t\tlet tmpLength = getCount - returnTips.length\n\t\t\t\t\t\t\t\tfor (let j = 0; j < tmpLength; j++){\n\t\t\t\t\t\t\t\t\treturnTips.push(tmpTips.pop());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn returnTips;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprvScore = tipArray[i].score;\n\t\t\t\t\t\ttmpTips.push(tipArray[i]);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(returnTips.length == getCount){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn returnTips;\n\t\t\t}else{\n\t\t\t\t//Todo: error message\n\t\t\t\tconsole.log(\"There are no tips for the same hit id\");\n\t\t\t\treturn returnTips;\n\t\t\t}\n\n\t}\n\n\n\tMeteor.methods({\n\t\tstoreTip: function(requestBody){\n\t\t\tTips.insert({\n\t\t\t\tprovider_id: requestBody.providerID,\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\thit_type : requestBody.hitType,\n\t\t\t\ttip: requestBody.content,\n\t\t\t\tscore: 0\n\t\t\t});\n\t\t\t//console.log(\"Success store raw tips to database\");\n\t\t},\n\t\tstoreRawType: function(requestBody){\n\t\t\t//Todo: think whether require to store the raw tips info\n\t\t\tHTType.insert({\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\thit_raw_type: requestBody.hitType,\n\t\t\t\tworker_id: requestBody.providerID\n\t\t\t});\n\t\t},\n\t\tprovideTip: function(requestBody){\n\t\t\tTips.insert({\n\t\t\t\tprovider_id: requestBody.providerID,\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\thit_type : requestBody.hitType,\n\t\t\t\ttip: requestBody.content,\n\t\t\t\tscore: 0,\n\t\t\t\tcreate_timestamp: requestBody.create_timestamp\n\t\t\t});\n\t\t\tconsole.log(\"Success store raw tips to database\");\n\t\t\t\n\t\t},\n\t\tgetTip: function(requestBody){\n\t\t\tlet topTips = [];\n\t\t\tconsole.log(requestBody.hitTitle.toLowerCase());\n\t\t\t//Same ID\n\t\t\tlet tipsByID = Tips.find({hit_set_id: requestBody.hitSetID}).fetch();\n\t\t\tif(tipsByID.length > 0){\n\t\t\t\tconsole.log(\"Same ID\");\n\t\t\t\tlet topTipsByID = getTopTip(tipsByID, MAXTOPTIP);\n\t\t\t\ttopTips.push.apply(topTips, topTipsByID);\n\t\t\t}\n\t\t\t\n\t\t\t//Same type top\n\t\t\tlet hitType = guessHITType(requestBody.hitSetID, requestBody.hitTitle.toLowerCase(), requestBody.hitDesc.toLowerCase(), requestBody.requesterID);\n\t\t\tif(hitType != \"others\"){\n\t\t\t\tconsole.log(hitType);\n\t\t\t\tlet tipsByType = Tips.find({hit_type: hitType, hit_set_id: {$ne: requestBody.hitSetID}}).fetch();\n\t\t\t\tif(tipsByType.length > 0){\n\t\t\t\t\tconsole.log(MAXTYPETOPTIP-topTips.length);\n\t\t\t\t\tlet topTipsByType = getTopTip(tipsByType, MAXTYPETOPTIP-topTips.length);\n\t\t\t\t\ttopTips.push.apply(topTips, topTipsByType);\n\t\t\t\t\t// console.log(topTips);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(hitType != \"others\"){\n\t\t\t\t//Same type New, only add one new to the tip list\n\t\t\t\tconsole.log(\"Random Tasks\");\n\t\t\t\tlet tipsByTypeID = Tips.find({hit_type: hitType}).fetch();\n\t\t\t\ttipsByTypeID = shuffle(tipsByTypeID); //random choose a advice from database\n\t\t\t\tfor(let i = tipsByTypeID.length-1; i >= 0 ; i--){\n\t\t\t\t\tlet isAlreadyIn = false;\n\t\t\t\t\tif(tipsByTypeID[i].score > -3 ){\n\t\t\t\t\t\tfor(let j = 0 ; j < topTips.length; j++){\n\t\t\t\t\t\t\tif(tipsByTypeID[i]._id == topTips[j]._id){\n\t\t\t\t\t\t\t\tisAlreadyIn = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!isAlreadyIn){\n\t\t\t\t\t\t\ttopTips.push(tipsByTypeID.pop());\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconsole.log(topTips);\n\n\t\t\tWorker.insert({\n\t\t\t\thit_title: requestBody.hitTitle,\n\t\t\t\thit_set_id: requestBody.hitSetID,\n\t\t\t\tworker_id : requestBody.workerID,\n\t\t\t\trequester_id: requestBody.requesterID\n\t\t\t});\n\n\t\t\tif(topTips.length > 0){\n\t\t\t\treturn JSON.stringify(topTips);\n\t\t\t}else{\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\t\n\t\t},\n\t\t\"getFeedback\": function(requestBody){\n\t\t\tlet feedback = Feedback.find({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}).fetch();\n\t\t\tif(feedback.length == 0){\n\t\t\t\treturn '{\"score\":0}';\n\t\t\t} else {\n\t\t\t\treturn '{\"score\":'+feedback[0].score+'}';\n\t\t\t}\n\t\t},\n\t\t\"upvoteTip\": function(requestBody){\n\t\t\tlet feedback = Feedback.find({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}).fetch();\n\t\t\tlet tip = Tips.find({_id: requestBody.tip_id}).fetch()[0];\n\t\t\tif(feedback.length == 0){ //the user hasn't provide feedback to the hit.\n\t\t\t\tFeedback.insert({\n\t\t\t\t\tfeedbacker_id: requestBody.feedbacker_id,\n\t\t\t\t\ttip_id: requestBody.tip_id,\n\t\t\t\t\tscore: 1,\n\t\t\t\t\tcreate_timestamp: requestBody.create_timestamp\n\t\t\t\t});\n\t\t\t\tlet tipScore = tip.score + 1;\n\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\treturn '{\"score\":1}';\n\t\t\t}else{\n\t\t\t\tif(feedback[0].score == 1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 0}});\n\t\t\t\t\tlet tipScore = tip.score - 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":0}';\n\t\t\t\t}else if(feedback[0].score == 0){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 1}});\n\t\t\t\t\tlet tipScore = tip.score + 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":1}';\n\t\t\t\t}else if(feedback[0].score == -1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 1}});\n\t\t\t\t\tlet tipScore = tip.score + 2;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":1}';\n\t\t\t\t}\n\t\t\t}\n\n\t\t},\n\t\t\"downvoteTip\": function(requestBody){\n\t\t\tlet feedback = Feedback.find({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}).fetch();\n\t\t\tlet tip = Tips.find({_id: requestBody.tip_id}).fetch()[0];\n\t\t\tif(feedback.length == 0){ //the user hasn't provide feedback to the hit.\n\t\t\t\tFeedback.insert({\n\t\t\t\t\tfeedbacker_id: requestBody.feedbacker_id,\n\t\t\t\t\ttip_id: requestBody.tip_id,\n\t\t\t\t\tscore: -1,\n\t\t\t\t\tcreate_timestamp: requestBody.create_timestamp\n\t\t\t\t});\n\t\t\t\tlet tipScore = tip.score - 1;\n\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\treturn '{\"score\":-1}';\n\t\t\t}else{\n\t\t\t\tif(feedback[0].score == 1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: -1}});\n\t\t\t\t\tlet tipScore = tip.score - 2;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":-1}';\n\t\t\t\t}else if(feedback[0].score == 0){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: -1}});\n\t\t\t\t\tlet tipScore = tip.score - 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":-1}';\n\t\t\t\t}else if(feedback[0].score == -1){\n\t\t\t\t\tFeedback.update({tip_id: requestBody.tip_id, feedbacker_id: requestBody.feedbacker_id}, {$set: {score: 0}});\n\t\t\t\t\tlet tipScore = tip.score + 1;\n\t\t\t\t\tTips.update({_id: requestBody.tip_id}, {$set: {score: tipScore}});\n\t\t\t\t\treturn '{\"score\":0}';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n});\n"]},"sourceType":"script","hash":"b5cc9ff4b0ffd86e00de3465e34cfafdee1fadd1"}
