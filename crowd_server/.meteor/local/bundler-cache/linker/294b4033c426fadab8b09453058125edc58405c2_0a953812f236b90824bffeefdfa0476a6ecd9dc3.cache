[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nRouter = Package['iron:router'].Router;\nRouteController = Package['iron:router'].RouteController;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nIron = Package['iron:core'].Iron;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"lib\":{\"router.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// lib/router.js                                                              //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nRouter.route(\"/\", {\n  where: \"server\"\n}).post(function () {\n  // console.log(this.request.body); //{ content: 'test1', hitType: 'audio' }\n  let requestBody = this.request.body;\n\n  if (typeof requestBody.method != \"undefined\") {\n    switch (requestBody.method) {\n      case \"provideTip\":\n        Meteor.call(\"provideTip\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(\"success\");\n          }\n        }); //Todo: error controller\n\n        break;\n\n      case \"getTip\":\n        Meteor.call(\"getTip\", requestBody, (err, result) => {\n          this.response.end(result);\n        });\n        break;\n\n      case \"upvoteTip\":\n        Meteor.call(\"upvoteTip\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(result);\n          }\n        });\n        break;\n\n      case \"downvoteTip\":\n        Meteor.call(\"downvoteTip\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(result);\n          }\n        });\n        break;\n\n      case \"getFeedback\":\n        Meteor.call(\"getFeedback\", requestBody, (err, result) => {\n          if (!err) {\n            this.response.end(result);\n          }\n        });\n        break;\n    }\n  }\n});\n////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"dataScheme.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// server/dataScheme.js                                                       //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nlet Mongo;\nmodule.watch(require(\"meteor/mongo\"), {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 0);\nTips = new Mongo.Collection(\"tips\");\nHITType = new Mongo.Collection(\"hit_type\");\nFeedback = new Mongo.Collection(\"feedback\");\nWorker = new Mongo.Collection(\"worker\");\n////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"/lib/router.js\");\nrequire(\"/server/dataScheme.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["lib/router.js","server/dataScheme.js"],"names":["Router","route","where","post","requestBody","request","body","method","Meteor","call","err","result","response","end","Mongo","module","watch","require","v","Tips","Collection","HITType","Feedback","Worker"],"mappings":";;;;;;;;AAAAA,OAAOC,KAAP,CAAa,GAAb,EAAkB;AAACC,SAAO;AAAR,CAAlB,EACEC,IADF,CACO,YAAW;AAChB;AAEA,MAAIC,cAAc,KAAKC,OAAL,CAAaC,IAA/B;;AACA,MAAG,OAAOF,YAAYG,MAAnB,IAA6B,WAAhC,EAA4C;AAC3C,YAAOH,YAAYG,MAAnB;AACC,WAAK,YAAL;AACCC,eAAOC,IAAP,CAAY,YAAZ,EAA0BL,WAA1B,EAAuC,CAACM,GAAD,EAAKC,MAAL,KAAgB;AACtD,cAAG,CAACD,GAAJ,EAAQ;AACP,iBAAKE,QAAL,CAAcC,GAAd,CAAkB,SAAlB;AACA;AACD,SAJD,EADD,CAMC;;AACA;;AACD,WAAK,QAAL;AACCL,eAAOC,IAAP,CAAY,QAAZ,EAAsBL,WAAtB,EAAmC,CAACM,GAAD,EAAMC,MAAN,KAAiB;AACnD,eAAKC,QAAL,CAAcC,GAAd,CAAkBF,MAAlB;AACA,SAFD;AAGA;;AACD,WAAK,WAAL;AACCH,eAAOC,IAAP,CAAY,WAAZ,EAAyBL,WAAzB,EAAsC,CAACM,GAAD,EAAKC,MAAL,KAAgB;AACrD,cAAG,CAACD,GAAJ,EAAQ;AACP,iBAAKE,QAAL,CAAcC,GAAd,CAAkBF,MAAlB;AACA;AACD,SAJD;AAKA;;AACD,WAAK,aAAL;AACCH,eAAOC,IAAP,CAAY,aAAZ,EAA2BL,WAA3B,EAAwC,CAACM,GAAD,EAAKC,MAAL,KAAgB;AACvD,cAAG,CAACD,GAAJ,EAAQ;AACP,iBAAKE,QAAL,CAAcC,GAAd,CAAkBF,MAAlB;AACA;AACD,SAJD;AAKA;;AACD,WAAK,aAAL;AACCH,eAAOC,IAAP,CAAY,aAAZ,EAA2BL,WAA3B,EAAwC,CAACM,GAAD,EAAMC,MAAN,KAAiB;AACxD,cAAG,CAACD,GAAJ,EAAQ;AACP,iBAAKE,QAAL,CAAcC,GAAd,CAAkBF,MAAlB;AACA;AACD,SAJD;AAKA;AAlCF;AAoCA;AAED,CA5CF,E;;;;;;;;;;;ACAA,IAAIG,KAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,cAAR,CAAb,EAAqC;AAACH,QAAMI,CAAN,EAAQ;AAACJ,YAAMI,CAAN;AAAQ;;AAAlB,CAArC,EAAyD,CAAzD;AAEVC,OAAO,IAAIL,MAAMM,UAAV,CAAqB,MAArB,CAAP;AACAC,UAAU,IAAIP,MAAMM,UAAV,CAAqB,UAArB,CAAV;AACAE,WAAW,IAAIR,MAAMM,UAAV,CAAqB,UAArB,CAAX;AACAG,SAAS,IAAIT,MAAMM,UAAV,CAAqB,QAArB,CAAT,C","file":"/app.js","sourcesContent":["Router.route(\"/\", {where: \"server\"})\n\t.post(function() {\n\t\t// console.log(this.request.body); //{ content: 'test1', hitType: 'audio' }\n\t\t\n\t\tlet requestBody = this.request.body;\n\t\tif(typeof requestBody.method != \"undefined\"){\n\t\t\tswitch(requestBody.method){\n\t\t\t\tcase \"provideTip\":\n\t\t\t\t\tMeteor.call(\"provideTip\", requestBody, (err,result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(\"success\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\t//Todo: error controller\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"getTip\":\n\t\t\t\t\tMeteor.call(\"getTip\", requestBody, (err, result) => {\n\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t});\n\t\t\t\t\tbreak; \n\t\t\t\tcase \"upvoteTip\":\n\t\t\t\t\tMeteor.call(\"upvoteTip\", requestBody, (err,result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"downvoteTip\":\n\t\t\t\t\tMeteor.call(\"downvoteTip\", requestBody, (err,result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"getFeedback\":\n\t\t\t\t\tMeteor.call(\"getFeedback\", requestBody, (err, result) => {\n\t\t\t\t\t\tif(!err){\n\t\t\t\t\t\t\tthis.response.end(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t});","import { Mongo } from \"meteor/mongo\";\n\nTips = new Mongo.Collection(\"tips\");\nHITType = new Mongo.Collection(\"hit_type\");\nFeedback = new Mongo.Collection(\"feedback\");\nWorker = new Mongo.Collection(\"worker\");"]}}]